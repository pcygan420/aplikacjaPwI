<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About1" xml:space="preserve">
    <value>Senegal got Africa’s first win of the World Cup with a 2-1 victory over Poland in Moscow on Tuesday. The team was helped by two fluky goals: a deflection, and a score by a player who was apparently unnoticed by the Poland defense. &lt;br&gt;&lt;br&gt;

                In the 37th minute of an evenly matched game, Sadio Mane held the ball for a moment, then found the perfect pass to Idrissa Gueye. He fired at goal, and it took a carom off Poland’s Thiago Cionek and zipped into the net.
                It was bad luck for Poland, but put Senegal ahead. Senegal’s second goal, in the 60th minute, was even more bizarre. Grzegorz
                Krychowiak of Poland passed the ball back, toward Jan Bednarek, the last defender, near the center circle. A routine play. &lt;br&gt;&lt;br&gt;

                </value>
  </data>
  <data name="About2" xml:space="preserve">
    <value>Except that Senegal’s M’Baye Niang had left the field and just at that moment had been approved by the ref to return. He spotted the action and raced to the ball with Bednarik completely unaware. &lt;br&gt;&lt;br&gt;
                Keeper Wojciech Szczesney figured out the situation and sped a good 40 yards out from his net. But it was too late. Niang got the ball and cruised toward the empty net for the easiest, though strangest, of scores. &lt;br&gt;&lt;br&gt;“When I left the pitch, it was an attack for Poland,” Niang said after the match. “When I came back on I saw a ball that was coming back to the defense. I felt that there was a chance to be taken.”&lt;br&gt;&lt;br&gt;
                Poland Coach Adam Nawałka on same play: “I’m convinced that Bednarek did not see the player on the side, and there was a misunderstanding. Szczesney tried to save the situation but he missed.”</value>
  </data>
  <data name="Offer" xml:space="preserve">
    <value>Service's offers</value>
  </data>
  <data name="ServiceDesc" xml:space="preserve">
    <value>Services connected with computer hardware and services of data processing.</value>
  </data>
  <data name="ServiceHeader" xml:space="preserve">
    <value>Service</value>
  </data>
  <data name="ServicesFirstHeader" xml:space="preserve">
    <value>Services offered by me.</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Successes</value>
  </data>
  <data name="SuccessesFirstHeader" xml:space="preserve">
    <value>Successes accomplished by me.</value>
  </data>
  <data name="SuccessHeader" xml:space="preserve">
    <value>Success</value>
  </data>
</root>